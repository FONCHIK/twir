extend type Query {
	timers: [Timer!]! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: VIEW_TIMERS)
}

extend type Mutation {
	timersCreate(opts: TimerCreateInput!): Timer! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
	timersUpdate(id: String!, opts: TimerUpdateInput!): Timer! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
	timersRemove(id: String!): Boolean! @isAuthenticated @hasAccessToSelectedDashboard @hasChannelRolesDashboardPermission(permission: MANAGE_TIMERS)
}

type Timer {
	id: ID!
	name: String!
	enabled: Boolean!
	timeInterval: Int!
	messageInterval: Int!
	responses: [TimerResponse!]!
}

type TimerResponse {
	id: ID!
	text: String!
	isAnnounce: Boolean!
}

input TimerCreateInput {
	name: String!
	enabled: Boolean!
	timeInterval: Int!
	messageInterval: Int!
	responses: [TimerResponseCreateInput!]!
}

input TimerResponseCreateInput {
	text: String!
	isAnnounce: Boolean!
}

input TimerUpdateInput {
	name: String
	enabled: Boolean
	timeInterval: Int
	messageInterval: Int
	responses: [TimerResponseUpdateInput!]
}

input TimerResponseUpdateInput {
	text: String!
	isAnnounce: Boolean!
}
